(here is where your spec/explanation to the tinychat backend developer goes)

There are three websocket events interacting with the backend and two http calls. The websockets are handled through Socket.io, and the http calls send JSON and expect JSON in return.

Socket events:

Socket.io library is used for realtime message updates. The documentation for this library can be found at socket.io and includes guidance for backend development with socket.io events and triggers. Additionally, mockServer.js contains a mock server that entertains the websocket connection and events.

	- 'connection'
		triggered by: client
		trigger: triggers each time a new client connection is made
		digested by: server
		function: notifies the server of a new socket connection and can be used to initilize event listeners 

	- 'send:message'
		triggered by: client
		trigger: triggers each time a message is submitted from a client 
		digested by: server
		function: should trigger broadcast of a 'broadcast:message' event trigger to all sockets (clients) other than the sender  

	- 'broadcast:message'
		triggered by: server
		trigger: should trigger each time a 'send:message' event is digested by the server
		digested by: client
		function: adds a new message to the client

Http endpoints:
	- /api/v1/messages
		- GET:
			Description: When page loads, we will use this endpoint to retrieve all existing messages
			Parameters:
				Required: none
				Optional: none 
			Success payload:
				response = JSON {
					body: {
						messages: {
							author: string 
							content: string
							id: int 
							timestamp: date (milliseconds)
							last_edited: date (milliseconds)
						}
						last_seen: date (milliseconds)
					}
				}
			Error payload:
				response = { body: 'Error retrieving messages' }

		- POST:
			Description: When a user submits a message, we will simultaneously send this message to this endpoint in addition to the websocket trigger to allow us to separate sockets from our main server.
			Parameters:
				Required:
					Author: string
					Content: string
				Optional: none
			Success payload:
				response = JSON {
					body: 'Message Received'
				}
			Error payload:
				response.body = {
					body: 'Error sending message'
				}


